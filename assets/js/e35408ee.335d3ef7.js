"use strict";(self.webpackChunkcotton_box_docs=self.webpackChunkcotton_box_docs||[]).push([[2626],{2498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>u,default:()=>f,frontMatter:()=>m,metadata:()=>x,toc:()=>j});var a=n(4848),o=n(8453);const s="import { Equality } from 'cotton-box'\n\nconsole.log(Equality.shallowCompareArray([], [])) // true\n\nconsole.log(Equality.shallowCompareArray([1, 2], [1, 2])) // true\nconsole.log(Equality.shallowCompareArray([1, 2], [1, 3])) // false\n\nconsole.log(Equality.shallowCompareArray(['a', 'b'], ['a', 'b'])) // true\nconsole.log(Equality.shallowCompareArray(['a', 'b'], ['a', 'c'])) // false\nconsole.log(Equality.shallowCompareArray(['a', 'b'], ['a'])) // false\n",r="import { Equality } from 'cotton-box'\n\nconsole.log(Equality.shallowCompareArrayOrObject([], [])) // true\nconsole.log(Equality.shallowCompareArrayOrObject({}, {})) // true\nconsole.log(Equality.shallowCompareArrayOrObject([], {})) // false\n\nconsole.log(Equality.shallowCompareArray([1, 2], [1, 2])) // true\n\nconsole.log(Equality.shallowCompareObject(\n  { a: 'foo', b: 42 },\n  { a: 'foo', b: 42 }\n)) // true\n",l="import { Equality } from 'cotton-box'\n\nconsole.log(Equality.shallowCompareObject({}, {})) // true\n\nconsole.log(Equality.shallowCompareObject(\n  { a: 'foo', b: 42 },\n  { a: 'foo', b: 42 }\n)) // true\n\nconsole.log(Equality.shallowCompareObject(\n  { a: 'foo', b: 42 },\n  { a: 'foo', b: 101 }\n)) // false\n\nconsole.log(Equality.shallowCompareObject(\n  { a: 'foo', b: 42 },\n  { a: 'foo', b: 42, c: [] }\n)) // false\n",i="import { Equality } from 'cotton-box'\n\nconsole.log(Equality.stringifyCompare('a', 'a')) // true\nconsole.log(Equality.stringifyCompare('42', 42)) // false\n\nconsole.log(Equality.stringifyCompare(\n  new Date('2020/11/26'),\n  new Date('2020/11/26')\n)) // true\n\nconsole.log(Equality.stringifyCompare(\n  new Date('2020/11/26'),\n  new Date('2020/11/27')\n)) // false\n";var c=n(6280),p=n(9235),d=n(9562),h=n(3439);const m={sidebar_position:18},u="Equality",x={id:"api/core/Equality",title:"Equality",description:"Overview",source:"@site/docs/api/core/Equality.mdx",sourceDirName:"api/core",slug:"/api/core/Equality",permalink:"/cotton-box/docs/api/core/Equality",draft:!1,unlisted:!1,editUrl:"https://github.com/glyph-cat/cotton-box/tree/main/packages/docs/docs/api/core/Equality.mdx",tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_position:18},sidebar:"apiSidebar",previous:{title:"EqualityFn",permalink:"/cotton-box/docs/api/core/EqualityFn"},next:{title:"React",permalink:"/cotton-box/docs/api/react"}},y={},j=[{value:"Overview",id:"overview",level:2},{value:"Presets",id:"presets",level:2},{value:"shallowCompareArray",id:"shallowcomparearray",level:3},{value:"Plain Example",id:"plain-example",level:4},{value:"React Example",id:"react-example",level:4},{value:"shallowCompareObject",id:"shallowcompareobject",level:3},{value:"Plain Example",id:"plain-example-1",level:4},{value:"React Example",id:"react-example-1",level:4},{value:"shallowCompareArrayOrObject",id:"shallowcomparearrayorobject",level:3},{value:"Plain Example",id:"plain-example-2",level:4},{value:"React Example",id:"react-example-2",level:4},{value:"stringifyCompare",id:"stringifycompare",level:3},{value:"Plain Example",id:"plain-example-3",level:4},{value:"React Example",id:"react-example-3",level:4}];function E(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"equality",children:"Equality"}),"\n",(0,a.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(d.r,{children:h.k.TSDOC_DESC_EQUALITY}),"\n",(0,a.jsx)(t.h2,{id:"presets",children:"Presets"}),"\n",(0,a.jsx)(t.h3,{id:"shallowcomparearray",children:"shallowCompareArray"}),"\n",(0,a.jsx)(d.r,{children:h.k.TSDOC_DESC_EQUALITY_SHALLOW_COMPARE_ARRAY}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"shallowCompareArray(\n  previousState: Array<any> | any,\n  nextState: Array<any> | any\n): boolean\n"})}),"\n",(0,a.jsx)(t.h4,{id:"plain-example",children:"Plain Example"}),"\n",(0,a.jsx)(p.P3,{code:s}),"\n",(0,a.jsx)(t.h4,{id:"react-example",children:"React Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"import { Equality, StateManager } from '{:CORE_PACKAGE_NAME:}'\nimport { useStateValue } from '{:REACT_PACKAGE_NAME:}'\n\nconst ExampleState = new StateManager({\n  foo: '...',\n  bar: '...',\n})\n\nfunction App(): JSX.Element {\n  const state = useStateValue(\n    ExampleState,\n    (state) => [state.foo, state.bar],\n    Equality.shallowCompareArray\n  )\n  return '...'\n}\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["Each time the selector runs, a new array is returned. By default, ",(0,a.jsx)(c.L,{href:h.k.API_REFERENCE_URL_OBJECT_IS,children:"Object.is"})," is used to compare the previous and next states. So even if the ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"length of array and the elements that it contains"})}),' do not change, they will still be treated as "not equal" and cause unnecessary re-rendering in components.']})}),"\n",(0,a.jsx)(t.h3,{id:"shallowcompareobject",children:"shallowCompareObject"}),"\n",(0,a.jsx)(d.r,{children:h.k.TSDOC_DESC_EQUALITY_SHALLOW_COMPARE_OBJECT}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"shallowCompareObject(previousState: any, nextState: any): boolean\n"})}),"\n",(0,a.jsx)(t.h4,{id:"plain-example-1",children:"Plain Example"}),"\n",(0,a.jsx)(p.P3,{code:l}),"\n",(0,a.jsx)(t.h4,{id:"react-example-1",children:"React Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"import { Equality, StateManager } from '{:CORE_PACKAGE_NAME:}'\nimport { useStateValue } from '{:REACT_PACKAGE_NAME:}'\n\nconst ExampleState = new StateManager({\n  foo: '...',\n  bar: '...',\n})\n\nfunction App(): JSX.Element {\n  const state = useStateValue(\n    ExampleState,\n    (state) => ({ foo: state.foo, bar: state.bar }),\n    Equality.shallowCompareObject\n  )\n  return '...'\n}\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["Each time the selector runs, a new object is returned. By default, ",(0,a.jsx)(c.L,{href:h.k.API_REFERENCE_URL_OBJECT_IS,children:"Object.is"})," is used to compare the previous and next states. So even if the ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"number of key-value pairs, their contents, and how they are ordered"})}),' do not change, the previous and next states will still be treated as "not equal" and cause unnecessary re-rendering in components.']})}),"\n",(0,a.jsx)(t.h3,{id:"shallowcomparearrayorobject",children:"shallowCompareArrayOrObject"}),"\n",(0,a.jsxs)(t.p,{children:["A wrapper around ",(0,a.jsx)(t.a,{href:"#shallowcomparearray",children:(0,a.jsx)(t.code,{children:"shallowCompareArray"})})," and ",(0,a.jsx)(t.a,{href:"#shallowcompareobject",children:(0,a.jsx)(t.code,{children:"shallowCompareObject"})}),". Only use this when you cannot determine whether your selected state will return an array or an object as it exhausts additional computing resources that could otherwise be prevented."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"shallowCompareArrayOrObject(\n  previousState: Array<any> | any,\n  nextState: Array<any> | any\n): boolean\n"})}),"\n",(0,a.jsx)(t.h4,{id:"plain-example-2",children:"Plain Example"}),"\n",(0,a.jsx)(p.P3,{code:r}),"\n",(0,a.jsx)(t.h4,{id:"react-example-2",children:"React Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"import { Equality, StateManager } from '{:CORE_PACKAGE_NAME:}'\nimport { useStateValue } from '{:REACT_PACKAGE_NAME:}'\n\nconst ExampleState = new StateManager({\n  foo: '...',\n  bar: '...',\n  baz: '...',\n  qux: '...',\n  someFlag: true,\n})\n\nconst complexSelector = (state) => {\n  if (state.someFlag) {\n    return [\n      state.foo,\n      state.bar,\n    ]\n  } else {\n    return {\n      baz: state.baz,\n      qux: state.qux,\n    }\n  }\n}\n\nfunction App(): JSX.Element {\n  const state = useStateValue(\n    ExampleState,\n    complexSelector,\n    Equality.shallowCompareArrayOrObject\n  )\n  return '...'\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"stringifycompare",children:"stringifyCompare"}),"\n",(0,a.jsxs)(t.p,{children:["Compares the previous and next states after serializing them with ",(0,a.jsx)(c.L,{href:h.k.API_REFERENCE_URL_JSON_STRINGIFY,children:"JSON.stringify"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"stringifyCompare(previousState: any, nextState: any): boolean\n"})}),"\n",(0,a.jsx)(t.h4,{id:"plain-example-3",children:"Plain Example"}),"\n",(0,a.jsx)(p.P3,{code:i}),"\n",(0,a.jsx)(t.h4,{id:"react-example-3",children:"React Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"import { Equality, StateManager } from '{:CORE_PACKAGE_NAME:}'\nimport { useStateValue } from '{:REACT_PACKAGE_NAME:}'\n\nconst ExampleState = new StateManager({\n  foo: new Date('...'),\n  bar: '...',\n})\n\nfunction App(): JSX.Element {\n  const state = useStateValue(\n    ExampleState,\n    (state) => state.foo,\n    Equality.stringifyCompare\n  )\n  return '...'\n}\n"})}),"\n",(0,a.jsxs)(t.admonition,{type:"warning",children:[(0,a.jsxs)(t.p,{children:["The example above is just for demonstration. Avoid using ",(0,a.jsx)(c.L,{href:h.k.API_REFERENCE_URL_JSON_STRINGIFY,children:"JSON.stringify"})," to compare states because it usually comes with a higher computing overhead as the states will first need to be serialized into strings before their values can be compared."]}),(0,a.jsx)(t.p,{children:"Instead, prefer using custom functions that are tailored to the shape of your state. This would be a more practical rewrite of the example above:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const state = useStateValue(\n  ExampleState,\n  (state) => state.foo,\n  // highlight-next-line\n  (prevState, nextState) => prevState.getTime() === nextState.getTime()\n)\n"})})]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:(0,a.jsx)("b",{children:'What is a "shape"?'})}),(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["In JavaScript programs, it\u2019s common to have multiple objects with the same property keys. Such objects have the same ",(0,a.jsx)(t.em,{children:"shape"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const object1 = { x: 1, y: 2 };\nconst object2 = { x: 3, y: 4 };\n// `object1` and `object2` have the same shape.\n"})}),"\n"]}),(0,a.jsxs)(t.p,{children:["Quoted from: ",(0,a.jsx)(t.a,{href:"https://mathiasbynens.be/notes/shapes-ics#shapes",children:"https://mathiasbynens.be/notes/shapes-ics#shapes"})]})]})})]})}function f(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(E,{...e})}):E(e)}},9235:(e,t,n)=>{n.d(t,{IG:()=>E,P3:()=>b});var a=n(4477),o=n(9047),s=n(5293),r=n(8553),l=n(5938),i=n(6540),c=n(4848);const p="index.js",d="App.tsx",h="styles.css",m="index.module.css",u=!1,x={[p]:["import { createRoot } from 'react-dom/client'","import App from './App.tsx'",`import './${h}'`,"","const root = createRoot(document.getElementById('root'))","root.render(<App />)",""].join("\n"),[h]:["body {","  font-family: sans-serif;","  -webkit-font-smoothing: auto;","  -moz-font-smoothing: auto;","  -moz-osx-font-smoothing: grayscale;","  font-smoothing: auto;","  text-rendering: optimizeLegibility;","  font-smooth: always;","  -webkit-tap-highlight-color: transparent;","  -webkit-touch-callout: none;","}"].join("\n"),"package.json":["{",`  "main": "${p}",`,'  "dependencies": {','    "react": "^18.0.0",','    "react-dom": "^18.0.0",','    "react-scripts": "^5.0.0"',"  }","}"].join("\n"),"public/index.html":["<!DOCTYPE html>",'<html lang="en">',"  <head>",'    <meta charset="UTF-8">','    <meta name="viewport" content="width=device-width, initial-scale=1.0">',"    <title>Example</title>","  </head>","  <body>",'    <div id="root"></div>',"  </body>","</html>"].join("\n")};function y(){const{colorMode:e}=(0,s.G)();return"light"===e?o.Zw:o.$o}const j={customSetup:{dependencies:{"cotton-box":"latest","cotton-box-react":"latest"}},options:{editorWidthPercentage:65,editorHeight:"45vh",showLineNumbers:!0,showRefreshButton:!0,showTabs:!1,wrapContent:!0}};function E(e){return(0,l.i)()?(0,c.jsx)(f,{...e}):null}function f(e){let{code:t,css:n,extraDependencies:o,options:s}=e;const r=y();return(0,c.jsx)(c.Fragment,{children:u?(0,c.jsx)(a.l5,{files:{...x,[d]:t,...n?{[m]:n}:{}},...j,theme:r,customSetup:{...j.customSetup,entry:p,dependencies:{...j.customSetup.dependencies,...o}},options:{...j.options,activeFile:d,showConsole:/console\./.test(t),...s},children:(0,c.jsxs)(a.am,{children:[(0,c.jsx)(w,{}),(0,c.jsx)(a.G5,{})]})}):(0,c.jsx)(a.OZ,{files:{...x,[d]:t,...n?{[m]:n}:{}},...j,theme:r,customSetup:{...j.customSetup,entry:p,dependencies:{...j.customSetup.dependencies,...o}},options:{...j.options,activeFile:d,showConsole:/console\./.test(t),...s}})})}function b(e){return(0,l.i)()?(0,c.jsx)(g,{...e}):null}function g(e){let{code:t}=e;const n=y();return(0,c.jsx)(c.Fragment,{children:u?(0,c.jsx)(a.l5,{files:{[p]:t},...j,theme:n,customSetup:{...j.customSetup,entry:p},options:{...j.options,activeFile:p},children:(0,c.jsxs)(a.am,{children:[(0,c.jsx)(w,{}),(0,c.jsx)(a.X2,{})]})}):(0,c.jsx)(a.OZ,{files:{[p]:t},...j,theme:n,customSetup:{...j.customSetup,entry:p},options:{...j.options,activeFile:p,layout:"console"}})})}function w(){const{code:e,updateCode:t}=(0,a.Pe)(),{sandpack:n}=(0,a.ny)();return(0,c.jsx)(a.aN,{children:(0,c.jsx)("div",{style:{flex:1},children:(0,c.jsx)(r.Ay,{language:"typescript",theme:"vs-dark",defaultValue:e,onChange:(0,i.useCallback)((e=>t(e||"")),[t]),options:{fontSize:14,minimap:{enabled:!1},scrollBeyondLastLine:!1,wordWrap:"on"}},n.activeFile)})})}}}]);
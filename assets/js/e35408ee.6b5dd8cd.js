"use strict";(self.webpackChunkcotton_box_docs=self.webpackChunkcotton_box_docs||[]).push([[2626],{788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>x,default:()=>g,frontMatter:()=>u,metadata:()=>a,toc:()=>f});const a=JSON.parse('{"id":"api/core/Equality","title":"Equality","description":"Overview","source":"@site/docs/api/core/Equality.mdx","sourceDirName":"api/core","slug":"/api/core/Equality","permalink":"/cotton-box/docs/api/core/Equality","draft":false,"unlisted":false,"editUrl":"https://github.com/glyph-cat/cotton-box/tree/main/packages/docs/docs/api/core/Equality.mdx","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20},"sidebar":"apiSidebar","previous":{"title":"EqualityFn","permalink":"/cotton-box/docs/api/core/EqualityFn"},"next":{"title":"StateSelector","permalink":"/cotton-box/docs/api/core/StateTransition"}}');var o=t(4848),r=t(8453);const s="import { shallowCompareArray } from '@glyph-cat/equality'\n\nif (typeof window !== 'undefined') {\n  // #region example\n  console.log(shallowCompareArray([], [])) // true\n\n  console.log(shallowCompareArray([1, 2], [1, 2])) // true\n  console.log(shallowCompareArray([1, 2], [1, 3])) // false\n\n  console.log(shallowCompareArray(['a', 'b'], ['a', 'b'])) // true\n  console.log(shallowCompareArray(['a', 'b'], ['a', 'c'])) // false\n  console.log(shallowCompareArray(['a', 'b'], ['a'])) // false\n  // #endregion example\n}\n\nexport default () => null\n",l="import {\n  shallowCompareArray,\n  shallowCompareArrayOrObject,\n  shallowCompareObject,\n} from '@glyph-cat/equality'\n\nif (typeof window !== 'undefined') {\n  // #region example\n  console.log(shallowCompareArrayOrObject([], [])) // true\n  console.log(shallowCompareArrayOrObject({}, {})) // true\n  console.log(shallowCompareArrayOrObject([], {})) // false\n\n  console.log(shallowCompareArray([1, 2], [1, 2])) // true\n\n  console.log(shallowCompareObject(\n    { a: 'foo', b: 42 },\n    { a: 'foo', b: 42 }\n  )) // true\n  // #endregion example\n}\n\nexport default () => null\n",i="import { shallowCompareObject } from '@glyph-cat/equality'\n\nif (typeof window !== 'undefined') {\n  // #region example\n  console.log(shallowCompareObject({}, {})) // true\n\n  console.log(shallowCompareObject(\n    { a: 'foo', b: 42 },\n    { a: 'foo', b: 42 }\n  )) // true\n\n  console.log(shallowCompareObject(\n    { a: 'foo', b: 42 },\n    { a: 'foo', b: 101 }\n  )) // false\n\n  console.log(shallowCompareObject(\n    { a: 'foo', b: 42 },\n    { a: 'foo', b: 42, c: [] }\n  )) // false\n  // #endregion example\n}\n\nexport default () => null\n",c="import { stringifyCompare } from '@glyph-cat/equality'\n\nif (typeof window !== 'undefined') {\n  // #region example\n  console.log(stringifyCompare('a', 'a')) // true\n  console.log(stringifyCompare('42', 42)) // false\n\n  console.log(stringifyCompare(\n    new Date('2020/11/26'),\n    new Date('2020/11/26')\n  )) // true\n\n  console.log(stringifyCompare(\n    new Date('2020/11/26'),\n    new Date('2020/11/27')\n  )) // false\n  // #endregion example\n}\n\nexport default () => null\n";var p=t(7869),m=t(4708),h=t(4501),d=t(7888);const u={sidebar_position:20},x="Equality",y={},f=[{value:"Overview",id:"overview",level:2},{value:"Presets",id:"presets",level:2},{value:"shallowCompareArray",id:"shallowcomparearray",level:3},{value:"Plain Example",id:"plain-example",level:4},{value:"React Example",id:"react-example",level:4},{value:"shallowCompareObject",id:"shallowcompareobject",level:3},{value:"Plain Example",id:"plain-example-1",level:4},{value:"React Example",id:"react-example-1",level:4},{value:"shallowCompareArrayOrObject",id:"shallowcomparearrayorobject",level:3},{value:"Plain Example",id:"plain-example-2",level:4},{value:"React Example",id:"react-example-2",level:4},{value:"stringifyCompare",id:"stringifycompare",level:3},{value:"Plain Example",id:"plain-example-3",level:4},{value:"React Example",id:"react-example-3",level:4}];function j(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"equality",children:"Equality"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(h.r,{children:"You may use [`@glyph-cat/equality`](https://github.com/glyph-cat/swiss-army-knife/tree/main/src/packages/equality) to customize the behavior of equality comparison functions in Cotton Box's React APIs.\n\nThe examples below how each of them can be used."}),"\n",(0,o.jsx)(n.h2,{id:"presets",children:"Presets"}),"\n",(0,o.jsx)(n.h3,{id:"shallowcomparearray",children:"shallowCompareArray"}),"\n",(0,o.jsx)(h.r,{children:d.k.TSDOC_DESC_EQUALITY_SHALLOW_COMPARE_ARRAY}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"shallowCompareArray(\n  previousState: Array<any> | any,\n  nextState: Array<any> | any\n): boolean\n"})}),"\n",(0,o.jsx)(n.h4,{id:"plain-example",children:"Plain Example"}),"\n",(0,o.jsx)(m.P3,{code:s}),"\n",(0,o.jsx)(n.h4,{id:"react-example",children:"React Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { shallowCompareArray } from '@glyph-cat/equality'\nimport { StateManager } from '{:CORE_PACKAGE_NAME:}'\nimport { useStateValue } from '{:REACT_PACKAGE_NAME:}'\nimport { JSX } from 'react'\n\nconst ExampleState = new StateManager({\n  foo: '...',\n  bar: '...',\n})\n\nfunction App(): JSX.Element {\n  const state = useStateValue(\n    ExampleState,\n    (state) => [state.foo, state.bar],\n    shallowCompareArray\n  )\n  return '...'\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Each time the selector runs, a new array is returned. By default, ",(0,o.jsx)(p.L,{href:d.k.API_REFERENCE_URL_OBJECT_IS,children:"Object.is"})," is used to compare the previous and next states. So even if the ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"length of array and the elements that it contains"})}),' do not change, they will still be treated as "not equal" and cause unnecessary re-rendering in components.']})}),"\n",(0,o.jsx)(n.h3,{id:"shallowcompareobject",children:"shallowCompareObject"}),"\n",(0,o.jsx)(h.r,{children:d.k.TSDOC_DESC_EQUALITY_SHALLOW_COMPARE_OBJECT}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"shallowCompareObject(previousState: any, nextState: any): boolean\n"})}),"\n",(0,o.jsx)(n.h4,{id:"plain-example-1",children:"Plain Example"}),"\n",(0,o.jsx)(m.P3,{code:i}),"\n",(0,o.jsx)(n.h4,{id:"react-example-1",children:"React Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { shallowCompareArray } from '@glyph-cat/equality'\nimport { StateManager } from '{:CORE_PACKAGE_NAME:}'\nimport { useStateValue } from '{:REACT_PACKAGE_NAME:}'\nimport { JSX } from 'react'\n\nconst ExampleState = new StateManager({\n  foo: '...',\n  bar: '...',\n})\n\nfunction App(): JSX.Element {\n  const state = useStateValue(\n    ExampleState,\n    (state) => ({ foo: state.foo, bar: state.bar }),\n    shallowCompareObject\n  )\n  return '...'\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Each time the selector runs, a new object is returned. By default, ",(0,o.jsx)(p.L,{href:d.k.API_REFERENCE_URL_OBJECT_IS,children:"Object.is"})," is used to compare the previous and next states. So even if the ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"number of key-value pairs, their contents, and how they are ordered"})}),' do not change, the previous and next states will still be treated as "not equal" and cause unnecessary re-rendering in components.']})}),"\n",(0,o.jsx)(n.h3,{id:"shallowcomparearrayorobject",children:"shallowCompareArrayOrObject"}),"\n",(0,o.jsxs)(n.p,{children:["A wrapper around ",(0,o.jsx)(n.a,{href:"#shallowcomparearray",children:(0,o.jsx)(n.code,{children:"shallowCompareArray"})})," and ",(0,o.jsx)(n.a,{href:"#shallowcompareobject",children:(0,o.jsx)(n.code,{children:"shallowCompareObject"})}),". Only use this when you cannot determine whether your selected state will return an array or an object as it exhausts additional computing resources that could otherwise be prevented."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"shallowCompareArrayOrObject(\n  previousState: Array<any> | any,\n  nextState: Array<any> | any\n): boolean\n"})}),"\n",(0,o.jsx)(n.h4,{id:"plain-example-2",children:"Plain Example"}),"\n",(0,o.jsx)(m.P3,{code:l}),"\n",(0,o.jsx)(n.h4,{id:"react-example-2",children:"React Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { shallowCompareArray } from '@glyph-cat/equality'\nimport { Equality, StateManager } from '{:CORE_PACKAGE_NAME:}'\nimport { useStateValue } from '{:REACT_PACKAGE_NAME:}'\nimport { JSX } from 'react'\n\nconst ExampleState = new StateManager({\n  foo: '...',\n  bar: '...',\n  baz: '...',\n  qux: '...',\n  someFlag: true,\n})\n\nconst complexSelector = (state) => {\n  if (state.someFlag) {\n    return [\n      state.foo,\n      state.bar,\n    ]\n  } else {\n    return {\n      baz: state.baz,\n      qux: state.qux,\n    }\n  }\n}\n\nfunction App(): JSX.Element {\n  const state = useStateValue(\n    ExampleState,\n    complexSelector,\n    shallowCompareArrayOrObject\n  )\n  return '...'\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"stringifycompare",children:"stringifyCompare"}),"\n",(0,o.jsxs)(n.p,{children:["Compares the previous and next states after serializing them with ",(0,o.jsx)(p.L,{href:d.k.API_REFERENCE_URL_JSON_STRINGIFY,children:"JSON.stringify"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"stringifyCompare(previousState: any, nextState: any): boolean\n"})}),"\n",(0,o.jsx)(n.h4,{id:"plain-example-3",children:"Plain Example"}),"\n",(0,o.jsx)(m.P3,{code:c}),"\n",(0,o.jsx)(n.h4,{id:"react-example-3",children:"React Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { shallowCompareArray } from '@glyph-cat/equality'\nimport { Equality, StateManager } from '{:CORE_PACKAGE_NAME:}'\nimport { useStateValue } from '{:REACT_PACKAGE_NAME:}'\nimport { JSX } from 'react'\n\nconst ExampleState = new StateManager({\n  foo: new Date('...'),\n  bar: '...',\n})\n\nfunction App(): JSX.Element {\n  const state = useStateValue(\n    ExampleState,\n    (state) => state.foo,\n    stringifyCompare\n  )\n  return '...'\n}\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"warning",children:[(0,o.jsxs)(n.p,{children:["The example above is just for demonstration. Avoid using ",(0,o.jsx)(p.L,{href:d.k.API_REFERENCE_URL_JSON_STRINGIFY,children:"JSON.stringify"})," to compare states because it usually comes with a higher computing overhead as the states will first need to be serialized into strings before their values can be compared."]}),(0,o.jsx)(n.p,{children:"Instead, prefer using custom functions that are tailored to the shape of your state. This would be a more practical rewrite of the example above:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const state = useStateValue(\n  ExampleState,\n  (state) => state.foo,\n  // highlight-next-line\n  (prevState, nextState) => prevState.getTime() === nextState.getTime()\n)\n"})})]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)("b",{children:'What is a "shape"?'})}),(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["In JavaScript programs, it\u2019s common to have multiple objects with the same property keys. Such objects have the same ",(0,o.jsx)(n.em,{children:"shape"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const object1 = { x: 1, y: 2 };\nconst object2 = { x: 3, y: 4 };\n// `object1` and `object2` have the same shape.\n"})}),"\n"]}),(0,o.jsxs)(n.p,{children:["Quoted from: ",(0,o.jsx)(n.a,{href:"https://mathiasbynens.be/notes/shapes-ics#shapes",children:"https://mathiasbynens.be/notes/shapes-ics#shapes"})]})]})})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(j,{...e})}):j(e)}},4708:(e,n,t)=>{t.d(n,{IG:()=>j,P3:()=>b});var a=t(9665),o=t(9047),r=t(8532),s=t(8553),l=t(3639),i=t(6540),c=t(4848);const p="index.js",m="App.tsx",h="styles.css",d="index.module.css",u=!1,x={[p]:["import { createRoot } from 'react-dom/client'","import App from './App.tsx'",`import './${h}'`,"","const root = createRoot(document.getElementById('root'))","root.render(<App />)",""].join("\n"),[h]:["body {","  font-family: sans-serif;","  -webkit-font-smoothing: auto;","  -moz-font-smoothing: auto;","  -moz-osx-font-smoothing: grayscale;","  font-smoothing: auto;","  text-rendering: optimizeLegibility;","  font-smooth: always;","  -webkit-tap-highlight-color: transparent;","  -webkit-touch-callout: none;","}"].join("\n"),"package.json":["{",`  "main": "${p}",`,'  "dependencies": {','    "react": "^18.0.0",','    "react-dom": "^18.0.0",','    "react-scripts": "^5.0.0"',"  }","}"].join("\n"),"public/index.html":["<!DOCTYPE html>",'<html lang="en">',"  <head>",'    <meta charset="UTF-8">','    <meta name="viewport" content="width=device-width, initial-scale=1.0">',"    <title>Example</title>","  </head>","  <body>",'    <div id="root"></div>',"  </body>","</html>"].join("\n")};function y(){const{colorMode:e}=(0,r.G)();return"light"===e?o.Zw:o.$o}const f={customSetup:{dependencies:{"cotton-box":"latest","cotton-box-react":"latest"}},options:{editorWidthPercentage:65,editorHeight:"45vh",showLineNumbers:!0,showRefreshButton:!0,showTabs:!1,wrapContent:!0}};function j(e){return(0,l.i)()?(0,c.jsx)(g,{...e}):null}function g(e){let{code:n,css:t,extraDependencies:o,options:r}=e;const s=y();return(0,c.jsx)(c.Fragment,{children:u?(0,c.jsx)(a.l5,{files:{...x,[m]:n,...t?{[d]:t}:{}},...f,theme:s,customSetup:{...f.customSetup,entry:p,dependencies:{...f.customSetup.dependencies,...o}},options:{...f.options,activeFile:m,showConsole:/console\./.test(n),...r},children:(0,c.jsxs)(a.am,{children:[(0,c.jsx)(E,{}),(0,c.jsx)(a.G5,{})]})}):(0,c.jsx)(a.OZ,{files:{...x,[m]:n,...t?{[d]:t}:{}},...f,theme:s,customSetup:{...f.customSetup,entry:p,dependencies:{...f.customSetup.dependencies,...o}},options:{...f.options,activeFile:m,showConsole:/console\./.test(n),...r}})})}function b(e){return(0,l.i)()?(0,c.jsx)(w,{...e}):null}function w(e){let{code:n}=e;const t=y();return(0,c.jsx)(c.Fragment,{children:u?(0,c.jsx)(a.l5,{files:{[p]:n},...f,theme:t,customSetup:{...f.customSetup,entry:p},options:{...f.options,activeFile:p},children:(0,c.jsxs)(a.am,{children:[(0,c.jsx)(E,{}),(0,c.jsx)(a.X2,{})]})}):(0,c.jsx)(a.OZ,{files:{[p]:n},...f,theme:t,customSetup:{...f.customSetup,entry:p},options:{...f.options,activeFile:p,layout:"console"}})})}function E(){const{code:e,updateCode:n}=(0,a.Pe)(),{sandpack:t}=(0,a.ny)();return(0,c.jsx)(a.aN,{children:(0,c.jsx)("div",{style:{flex:1},children:(0,c.jsx)(s.Ay,{language:"typescript",theme:"vs-dark",defaultValue:e,onChange:(0,i.useCallback)((e=>n(e||"")),[n]),options:{fontSize:14,minimap:{enabled:!1},scrollBeyondLastLine:!1,wordWrap:"on"}},t.activeFile)})})}}}]);
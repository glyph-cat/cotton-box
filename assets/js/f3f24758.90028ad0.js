"use strict";(self.webpackChunkcotton_box_docs=self.webpackChunkcotton_box_docs||[]).push([[6482],{1290:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>u,toc:()=>m});var o=n(4848),s=n(8453);const r="import { StateManager } from 'cotton-box'\nimport { useStateValue } from 'cotton-box-react'\n\nfunction App(): JSX.Element {\n  const luckyNumber = useStateValue(UserState, (state) => state.luckyNumber)\n  console.log('App is rendering...')\n  return (\n    <>\n      <h1>Lucky number: {luckyNumber}</h1>\n      <button onClick={setName}>Set name</button>\n      <button onClick={setLuckyNumber}>Set lucky number</button>\n    </>\n  )\n}\n\nexport default App\n\ninterface IUserState {\n  firstName: string\n  lastName: string\n  luckyNumber: number\n}\n\nconst UserState = new StateManager<IUserState>({\n  firstName: 'John',\n  lastName: 'Smith',\n  luckyNumber: 42,\n})\n\nfunction setName(): void {\n  const names: Array<string> = ['Adam', 'Bob', 'Carlo', 'David', 'Eric']\n  UserState.set((previousState) => ({\n    ...previousState,\n    firstName: names[Math.floor(Math.random() * names.length)],\n  }))\n}\n\nfunction setLuckyNumber(): void {\n  UserState.set((previousState) => ({\n    ...previousState,\n    luckyNumber: Math.round(Math.random() * 100),\n  }))\n}\n";var a=n(6280),i=n(9235);const c={sidebar_position:3},l="Selectors",u={id:"learn/react/selectors",title:"Selectors",description:"Sometimes, our state might be an object and we only need to the value of certain properties from that object, but when any property is changed, the entire object changes, resulting in components to re-render. This is when selectors can help us overcome this problem.",source:"@site/docs/learn/react/selectors.mdx",sourceDirName:"learn/react",slug:"/learn/react/selectors",permalink:"/cotton-box/docs/learn/react/selectors",draft:!1,unlisted:!1,editUrl:"https://github.com/glyph-cat/cotton-box/tree/main/packages/docs/docs/learn/react/selectors.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"learnSidebar",previous:{title:"Quick Start",permalink:"/cotton-box/docs/learn/react/quick-start"},next:{title:"Observing Initialization State",permalink:"/cotton-box/docs/learn/react/observing-initialization-state"}},d={},m=[{value:"Example",id:"example",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"selectors",children:"Selectors"}),"\n",(0,o.jsx)(t.p,{children:"Sometimes, our state might be an object and we only need to the value of certain properties from that object, but when any property is changed, the entire object changes, resulting in components to re-render. This is when selectors can help us overcome this problem."}),"\n",(0,o.jsxs)(t.p,{children:["Take ",(0,o.jsx)(t.code,{children:"IUserState"})," for example, we might have a component that is only responsible for showing ",(0,o.jsx)(t.code,{children:"luckyNumber"})," and we do not want it to re-render when ",(0,o.jsx)(t.code,{children:"firstName"})," changes."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"interface IUserState {\n  firstName: string\n  lastName: string\n  luckyNumber: number\n}\n\nconst UserState = new StateManager<IUserState>({\n  firstName: 'John',\n  lastName: 'Smith',\n  luckyNumber: 42,\n})\n"})}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(t.p,{children:["We can pass ",(0,o.jsx)(t.code,{children:"(state) => state.luckyNumber"})," as the second parameter to ",(0,o.jsx)(a.L,{href:"../../api/react/useStateValue",children:"useStateValue"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"const luckyNumber = useStateValue(UserState, (state) => state.luckyNumber)\n"})}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(t.p,{children:["By doing so, only the previous and upcoming values of ",(0,o.jsx)(t.code,{children:"state.luckyNumber"})," is compared when the state changes. Therefore, the component will only re-render when ",(0,o.jsx)(t.code,{children:"luckyNumber"})," changes."]}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(t.p,{children:["In this example, we can confirm that the component does not re-render by verifying that ",(0,o.jsx)(t.code,{children:"console.log('Rendering...')"})," is not executed no matter how many times the value of ",(0,o.jsx)(t.code,{children:"firstName"})," changes, but whenever ",(0,o.jsx)(t.code,{children:"luckyNumber"})," changes, it will be executed."]}),"\n",(0,o.jsx)(i.IG,{code:r,options:{showConsole:!0}})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},9235:(e,t,n)=>{n.d(t,{IG:()=>f,P3:()=>y});var o=n(4477),s=n(9047),r=n(5293),a=n(8553),i=n(5938),c=n(6540),l=n(4848);const u="index.js",d="App.tsx",m="styles.css",h="index.module.css",p=!1,x={[u]:["import { createRoot } from 'react-dom/client'","import App from './App.tsx'",`import './${m}'`,"","const root = createRoot(document.getElementById('root'))","root.render(<App />)",""].join("\n"),[m]:["body {","  font-family: sans-serif;","  -webkit-font-smoothing: auto;","  -moz-font-smoothing: auto;","  -moz-osx-font-smoothing: grayscale;","  font-smoothing: auto;","  text-rendering: optimizeLegibility;","  font-smooth: always;","  -webkit-tap-highlight-color: transparent;","  -webkit-touch-callout: none;","}"].join("\n"),"package.json":["{",`  "main": "${u}",`,'  "dependencies": {','    "react": "^18.0.0",','    "react-dom": "^18.0.0",','    "react-scripts": "^5.0.0"',"  }","}"].join("\n"),"public/index.html":["<!DOCTYPE html>",'<html lang="en">',"  <head>",'    <meta charset="UTF-8">','    <meta name="viewport" content="width=device-width, initial-scale=1.0">',"    <title>Example</title>","  </head>","  <body>",'    <div id="root"></div>',"  </body>","</html>"].join("\n")};function b(){const{colorMode:e}=(0,r.G)();return"light"===e?s.Zw:s.$o}const g={customSetup:{dependencies:{"cotton-box":"latest","cotton-box-react":"latest"}},options:{editorWidthPercentage:65,editorHeight:"45vh",showLineNumbers:!0,showRefreshButton:!0,showTabs:!1,wrapContent:!0}};function f(e){return(0,i.i)()?(0,l.jsx)(j,{...e}):null}function j(e){let{code:t,css:n,extraDependencies:s,options:r}=e;const a=b();return(0,l.jsx)(l.Fragment,{children:p?(0,l.jsx)(o.l5,{files:{...x,[d]:t,...n?{[h]:n}:{}},...g,theme:a,customSetup:{...g.customSetup,entry:u,dependencies:{...g.customSetup.dependencies,...s}},options:{...g.options,activeFile:d,showConsole:/console\./.test(t),...r},children:(0,l.jsxs)(o.am,{children:[(0,l.jsx)(k,{}),(0,l.jsx)(o.G5,{})]})}):(0,l.jsx)(o.OZ,{files:{...x,[d]:t,...n?{[h]:n}:{}},...g,theme:a,customSetup:{...g.customSetup,entry:u,dependencies:{...g.customSetup.dependencies,...s}},options:{...g.options,activeFile:d,showConsole:/console\./.test(t),...r}})})}function y(e){return(0,i.i)()?(0,l.jsx)(S,{...e}):null}function S(e){let{code:t}=e;const n=b();return(0,l.jsx)(l.Fragment,{children:p?(0,l.jsx)(o.l5,{files:{[u]:t},...g,theme:n,customSetup:{...g.customSetup,entry:u},options:{...g.options,activeFile:u},children:(0,l.jsxs)(o.am,{children:[(0,l.jsx)(k,{}),(0,l.jsx)(o.X2,{})]})}):(0,l.jsx)(o.OZ,{files:{[u]:t},...g,theme:n,customSetup:{...g.customSetup,entry:u},options:{...g.options,activeFile:u,layout:"console"}})})}function k(){const{code:e,updateCode:t}=(0,o.Pe)(),{sandpack:n}=(0,o.ny)();return(0,l.jsx)(o.aN,{children:(0,l.jsx)("div",{style:{flex:1},children:(0,l.jsx)(a.Ay,{language:"typescript",theme:"vs-dark",defaultValue:e,onChange:(0,c.useCallback)((e=>t(e||"")),[t]),options:{fontSize:14,minimap:{enabled:!1},scrollBeyondLastLine:!1,wordWrap:"on"}},n.activeFile)})})}}}]);
"use strict";(self.webpackChunkcotton_box_docs=self.webpackChunkcotton_box_docs||[]).push([[972],{1680:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"learn/react/migration-from-react-relink","title":"Migration From react-relink","description":"{/ NOTE: sidebar position is not specified, this should be the last article in the sidebar. /}","source":"@site/docs/learn/react/migration-from-react-relink.mdx","sourceDirName":"learn/react","slug":"/learn/react/migration-from-react-relink","permalink":"/cotton-box/docs/learn/react/migration-from-react-relink","draft":false,"unlisted":false,"editUrl":"https://github.com/glyph-cat/cotton-box/tree/main/packages/docs/docs/learn/react/migration-from-react-relink.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"learnSidebar","previous":{"title":"Hiding values from React Developer Tools","permalink":"/cotton-box/docs/learn/react/hiding-values-from-react-developer-tools"}}');var a=t(4848),s=t(8453);const r={},l="Migration From react-relink",o={},c=[{value:"Setup",id:"setup",level:2},{value:"Instantiation",id:"instantiation",level:2},{value:"Consuming the State",id:"consuming-the-state",level:2},{value:"Handling dependencies",id:"handling-dependencies",level:2},{value:"Re-initialization",id:"re-initialization",level:2},{value:"Scope",id:"scope",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsxs)(n.h1,{id:"migration-from-react-relink",children:["Migration From ",(0,a.jsx)(n.code,{children:"react-relink"})]})}),"\n","\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["The usage of ",(0,a.jsx)(n.code,{children:".get"}),", ",(0,a.jsx)(n.code,{children:".set"}),", ",(0,a.jsx)(n.code,{children:".reset"}),", and ",(0,a.jsx)(n.code,{children:".dispose"})," remains the same."]})}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",metastring:'title="Before"',children:"yarn add react-relink\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",metastring:'title="Now"',children:"yarn add {:CORE_PACKAGE_NAME:} {:REACT_PACKAGE_NAME:}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"instantiation",children:"Instantiation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Before"',children:"import { RelinkSource } from 'react-relink'\n\nconst ExampleSource = new RelinkSource({\n  key: 'example-source',\n  default: 'defaultState',\n  lifecycle: {\n    init({ commit, commitNoop, defaultState }) {\n      // ...\n    },\n    didSet({ state }) {\n      // ...\n    },\n    didReset() {\n      // ...\n    },\n  },\n  options: {\n    suspense: true | false,\n    public: true | false,\n  },\n  scope: OtherSource,\n})\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Now"',children:"// highlight-next-line\nimport { AsyncStateManager, StateManagerVisibility } from '{:CORE_PACKAGE_NAME:}'\n\n// highlight-start\n// Default state is passed as first parameter,\n// remaining options are passed as the second.\nconst ExampleState = new AsyncStateManager('defaultState', {\n  // `key` is no longer needed, but there is a `name` property,\n  // which is *optional* and only used for debugging.\n  // highlight-end\n  lifecycle: {\n    init({ commit, commitNoop, defaultState }) {\n      // ...\n    },\n    // highlight-start\n    // `defaultState` is exposed here:\n    didSet({ state, defaultState }) {\n      // highlight-end\n      // ...\n    },\n    didReset() {\n      // ...\n    },\n  },\n  // highlight-start\n  // New option:\n  clientOnly: true | false,\n  // `visibility` is a boolean type in react-relink:\n  visibility: StateManagerVisibility.ENVIRONMENT,\n  // highlight-end\n  suspense: true | false,\n  // highlight-start\n  // Scope is not supported by Cotton Box\n  // highlight-end\n})\n"})}),"\n",(0,a.jsx)(n.h2,{id:"consuming-the-state",children:"Consuming the State"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Before"',children:"function App() {\n  import { useRelinkValue } from 'react-relink'\n\n  const state = useRelinkValue(ExampleSource)\n  return '...'\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Now"',children:"function App() {\n  // highlight-next-line\n  import { useStateValue } from '{:REACT_PACKAGE_NAME:}'\n\n  // highlight-next-line\n  const state = useStateValue(ExampleState)\n  return '...'\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"handling-dependencies",children:"Handling dependencies"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Before"',children:"const ExampleSourceA = new RelinkSource({\n  key: 'example-source-a',\n  default: '...',\n  lifecycle: { /* ... */ },\n})\n\nconst ExampleSourceB = new RelinkSource({\n  key: 'example-source-b',\n  default: '...',\n  deps: [ExampleSourceA],\n  lifecycle: { /* ... */ },\n})\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Now"',children:"const ExampleStateA = new StateManager('...')\n\nconst ExampleStateB = new StateManager('...', {\n  lifecycle: {\n    init() {\n      await ExampleStateA.isInitializing.wait(false)\n      // continue to do something\n    },\n  },\n})\n"})}),"\n",(0,a.jsx)(n.h2,{id:"re-initialization",children:"Re-initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Before"',children:"MySource.hydrate(...)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Now"',children:"ExampleState.init(...)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"scope",children:"Scope"}),"\n",(0,a.jsxs)(n.p,{children:["Cotton Box does not have Scope-related APIs to reduce complexity. Instead, we recommend using ",(0,a.jsx)(n.a,{href:"https://react.dev/learn/passing-data-deeply-with-context",children:"React's Context API"})," as a substitute as it allows more fine-grained control at the same time."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);
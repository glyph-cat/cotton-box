"use strict";(self.webpackChunkcotton_box_docs=self.webpackChunkcotton_box_docs||[]).push([[972],{7711:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(4848),i=t(8453);const r={},s="Migration From react-relink",l={id:"learn/react/migration-from-react-relink",title:"Migration From react-relink",description:"{/ NOTE: sidebar position is not specified, this should be the last article in the sidebar. /}",source:"@site/docs/learn/react/migration-from-react-relink.mdx",sourceDirName:"learn/react",slug:"/learn/react/migration-from-react-relink",permalink:"/cotton-box/docs/learn/react/migration-from-react-relink",draft:!1,unlisted:!1,editUrl:"https://github.com/glyph-cat/cotton-box/tree/main/packages/docs/docs/learn/react/migration-from-react-relink.mdx",tags:[],version:"current",frontMatter:{},sidebar:"learnSidebar",previous:{title:"Hiding values from React Developer Tools",permalink:"/cotton-box/docs/learn/react/hiding-values-from-react-developer-tools"}},o={},c=[{value:"Setup",id:"setup",level:2},{value:"Instantiation",id:"instantiation",level:2},{value:"Consuming the State",id:"consuming-the-state",level:2},{value:"Handling dependencies",id:"handling-dependencies",level:2},{value:"Re-initialization",id:"re-initialization",level:2},{value:"Scope",id:"scope",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"migration-from-react-relink",children:["Migration From ",(0,a.jsx)(n.code,{children:"react-relink"})]}),"\n","\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["The usage of ",(0,a.jsx)(n.code,{children:".get"}),", ",(0,a.jsx)(n.code,{children:".set"}),", ",(0,a.jsx)(n.code,{children:".reset"}),", and ",(0,a.jsx)(n.code,{children:".dispose"})," remains the same."]})}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",metastring:'title="Before"',children:"yarn add react-relink\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",metastring:'title="Now"',children:"yarn add {:CORE_PACKAGE_NAME:} {:REACT_PACKAGE_NAME:}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"instantiation",children:"Instantiation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Before"',children:"import { RelinkSource } from 'react-relink'\n\nconst ExampleSource = new RelinkSource({\n  key: 'example-source',\n  default: 'defaultState',\n  lifecycle: {\n    init({ commit, commitNoop, defaultState }) {\n      // ...\n    },\n    didSet({ state }) {\n      // ...\n    },\n    didReset() {\n      // ...\n    },\n  },\n  options: {\n    suspense: true | false,\n    public: true | false,\n  },\n  scope: OtherSource,\n})\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Now"',children:"// highlight-next-line\nimport { AsyncStateManager, StateManagerVisibility } from '{:CORE_PACKAGE_NAME:}'\n\n// highlight-start\n// Default state is passed as first parameter,\n// remaining options are passed as the second.\nconst ExampleState = new AsyncStateManager('defaultState', {\n  // `key` is no longer needed, but there is a `name` property,\n  // which is *optional* and only used for debugging.\n  // highlight-end\n  lifecycle: {\n    init({ commit, commitNoop, defaultState }) {\n      // ...\n    },\n    // highlight-start\n    // `defaultState` is exposed here:\n    didSet({ state, defaultState }) {\n      // highlight-end\n      // ...\n    },\n    didReset() {\n      // ...\n    },\n  },\n  // highlight-start\n  // New option:\n  clientOnly: true | false,\n  // `visibility` is a boolean type in react-relink:\n  visibility: StateManagerVisibility.ENVIRONMENT,\n  // highlight-end\n  suspense: true | false,\n  scope: OtherState,\n})\n"})}),"\n",(0,a.jsx)(n.h2,{id:"consuming-the-state",children:"Consuming the State"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Before"',children:"function App() {\n  import { useRelinkValue } from 'react-relink'\n\n  const state = useRelinkValue(ExampleSource)\n  return '...'\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Now"',children:"function App() {\n  // highlight-next-line\n  import { useStateValue } from '{:REACT_PACKAGE_NAME:}'\n\n  // highlight-next-line\n  const state = useStateValue(ExampleState)\n  return '...'\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"handling-dependencies",children:"Handling dependencies"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Before"',children:"const ExampleSourceA = new RelinkSource({\n  key: 'example-source-a',\n  default: '...',\n  lifecycle: { /* ... */ },\n})\n\nconst ExampleSourceB = new RelinkSource({\n  key: 'example-source-b',\n  default: '...',\n  deps: [ExampleSourceA],\n  lifecycle: { /* ... */ },\n})\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Now"',children:"const ExampleStateA = new StateManager('...')\n\nconst ExampleStateB = new StateManager('...', {\n  lifecycle: {\n    init() {\n      await ExampleStateA.waitForInit()\n      // continue to do something\n    },\n  },\n})\n"})}),"\n",(0,a.jsx)(n.h2,{id:"re-initialization",children:"Re-initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Before"',children:"MySource.hydrate(...)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="Now"',children:"ExampleState.init(...)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"scope",children:"Scope"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:'title="Before"',children:"const ExampleSourceA = new RelinkSource({\n  key: 'example-source-a',\n  default: '...',\n})\n\nconst ExampleSourceB = new RelinkSource({\n  key: 'example-source-b',\n  default: '...',\n  scope: ExampleSourceA,\n})\n\nfunction App() {\n  return (\n    <RelinkScope with={[ExampleSourceB]}>\n      <MyComponent />\n    </RelinkScope>\n  )\n}\n\nfunction MyComponent() {\n  const [state, setState, resetState] = useRelinkState(ExampleSourceB)\n  return '...'\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:'title="Now"',children:"const ExampleStateA = new StateManager('...')\n\nconst ExampleStateB = new StateManager('...', {\n  scope: ExampleStateA,\n})\n\nfunction App() {\n  return (\n    <StateManagerScopeProvider with={[ExampleStateB]}>\n      <MyComponent />\n    </StateManagerScopeProvider>\n  )\n}\n\nfunction MyComponent() {\n  const state = useStateValue(useScoped(ExampleStateB))\n  return '...'\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);